数组的声明
var variable_name [SIZE] variable_type
var variable_name [SIZE1][SIZE2]...[SIZEN] variable_type

var balance [10] float32
var threedim [5][10][4]int
数组的初始化
var balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0}
 初始化数组中 {} 中的元素个数不能大于 [] 中的数字。

如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：

 var balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0}---------------------？test

该实例与上面的实例是一样的，虽然没有设置数组的大小。

func getAverage(arr []int, size int) float32
   avg = getAverage( balance, 5 ) ;
   函数
   func function_name( [parameter list] ) [return_types] {-----如果没有返回值 return不必须
   函数体
}
swap(&a,&b)
func swap(x *int, y *int) {}
函数的用法：
--------------
func main(){
   /* 声明函数变量 */-----------函数赋值
   getSquareRoot := func(x float64) float64 {-----函数直接赋值，没有名字 也有名字
      return math.Sqrt(x)
   }

   /* 使用函数 */
   fmt.Println(getSquareRoot(9))    9------可以传参

}
闭包函数：匿名函数
 Go 语言支持匿名函数，可作为闭包。匿名函数是一个"内联"语句或表达式。匿名函数的优越性在于可以直接使用函数内的变量，不必申明。 
 func getSequence() func() int {------返回值是一个 函数（）
   i:=0
   return func() int {-----------匿名函数  ：内联语句
      i+=1
     return i  
   }
}

func main(){
   /* nextNumber 为一个函数，函数 i 为 0 */
   nextNumber := getSequence()  

   /* 调用 nextNumber 函数，i 变量自增 1 并返回 */
   fmt.Println(nextNumber())
   fmt.Println(nextNumber())
   fmt.Println(nextNumber())
   
   /* 创建新的函数 nextNumber1，并查看结果 */
   nextNumber1 := getSequence()  
   fmt.Println(nextNumber1())
   fmt.Println(nextNumber1())
}--1 2 3 1 2


------
函数作为值 	函数定义后可作为值来使用： getSquareRoot := func(x float64) float64 {  return math.Sqrt(x)}   getSquareRoot（9）：函数指针
闭包 	闭包是匿名函数，可在动态编程中使用
方法 	方法就是一个包含了接受者的函数
方法：
 Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针
 。所有给定类型的方法属于该类型的方法集。语法格式如下：

func (variable_name variable_data_type) function_name() [return_type]{
   /* 函数体*/
}

下面定义一个结构体类型和该类型的一个方法：

package main

import (
   "fmt"  
)

/* 定义结构体 */
type Circle struct {
  radius float64
}

func main() {
  var c1 Circle
  c1.radius = 10.00
  fmt.Println("Area of Circle(c1) = ", c1.getArea())
}

//该 method 属于 Circle 类型对象中的方法
func (c Circle) getArea() float64 {      类型对象 类型方法
  //c.radius 即为 Circle 类型对象中的属性
  return 3.14 * c.radius * c.radius
}
-----------------
指针：内存地址
var var_name *var-type
以下声明了整型指针数组：

var ptr [MAX]*int;
指向指针的指针变量声明格式如下：

var ptr **int;


定义切片

你可以声明一个未指定大小的数组来定义切片：动态数组

var identifier []type   

切片不需要说明长度。

或使用make()函数来创建切片:

var slice1 []type = make([]type, len)

也可以简写为

slice1 := make([]type, len)
len() 和 cap() 函数

append() 和 copy() 函数

如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。

下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法


-----
Go 语言中 range 关键字用于for循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。
在数组和切片中它返回元素的索引值，在集合中返回 key-value 对的 key 值。 
    //这是我们使用range去求一个slice的和。使用数组跟这个很类似
    nums := []int{2, 3, 4}
    sum := 0
    for _, num := range nums {
        sum += num
    }
    fmt.Println("sum:", sum)
    //在数组上使用range将传入index和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符"_"省略了。有时侯我们确实需要知道它的索引。
    for i, num := range nums {
        if num == 3 {
            fmt.Println("index:", i)
        }
    }
    //range也可以用在map的键值对上。
    kvs := map[string]string{"a": "apple", "b": "banana"}
    for k, v := range kvs {
        fmt.Printf("%s -> %s\n", k, v)
    }
    //range也可以用来枚举Unicode字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。
    for i, c := range "go" {
        fmt.Println(i, c)
    }

------------
Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。

Map 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，我们无法决定它的返回顺序，这是因为 Map 是使用 hash 表来实现的。
定义 Map

可以使用内建函数 make 也可以使用 map 关键字来定义 Map:

/* 声明变量，默认 map 是 nil */
var map_variable map[key_data_type]value_data_type

/* 使用 make 函数 */
map_variable := make(map[key_data_type]value_data_type

 kvs := map[string]string{"a": "apple", "b": "banana"}
    for k, v := range kvs {
        fmt.Printf("%s -> %s\n", k, v)
    }
   /* 查看元素在集合中是否存在 */
   -key--captial, ok := countryCapitalMap["United States"]
   /* 如果 ok 是 true, 则存在，否则不存在*/
   删除元素
      delete(countryCapitalMap,"France");
   /* 打印 map */----一个元素接收  返回的是key
   for country := range countryCapitalMap {
      fmt.Println("Capital of",country,"is",countryCapitalMap[country])
   }
---------
类型转换
sum  count 为int类型 mean  float32
   mean = float32(sum)/float32(count)
   
   
   ----------------
   接口
   Go 语言接口

Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口
/* 定义接口 */
type interface_name interface {
   method_name1 [return_type]
   method_name2 [return_type]
   method_name3 [return_type]
   ...
   method_namen [return_type]
}

/* 定义结构体 */
type struct_name struct {
   /* variables */
}

/* 实现接口方法 */
func (struct_name_variable struct_name) method_name1() [return_type] {    ----------------这和方法一样  叫某个类型的方法集
   /* 方法实现 */               ----------记住：struct_name_variable struct_name不是参数列表
}


接口的好处：不同类型的结构体 实现相同的方法---------------类型结构体实现接口中的函数 即是实现了接口
package main

import (
    "fmt"
)

type Phone interface {
    call()
}

type NokiaPhone struct {
}

func (nokiaPhone NokiaPhone) call() {
    fmt.Println("I am Nokia, I can call you!")
}

type IPhone struct {
}

func (iPhone IPhone) call() {
    fmt.Println("I am iPhone, I can call you!")
}

func main() {
    var phone Phone   --------接口的声明

    phone = new(NokiaPhone)    实例化接口变量
    phone.call()

    phone = new(IPhone)
    phone.call()
-------------------------在判断时   选择时有用
}


--------------------------------------------
package main

import (
	"fmt"
)

// 定义一个 DivideError 结构
type DivideError struct {
	dividee int
	divider int
}

// 实现 `error` 接口
func (de *DivideError) Error() string {
	strFormat := `
    Cannot proceed, the divider is zero.
    dividee: %d
    divider: 0
`
	return fmt.Sprintf(strFormat, de.dividee)
}

// 定义 `int` 类型除法运算的函数
func Divide(varDividee int, varDivider int) (result int, errorMsg string) {
	if varDivider == 0 {
		dData := DivideError{
			dividee: varDividee,
			divider: varDivider,
		}
		errorMsg = dData.Error()
		return
	} else {
		return varDividee / varDivider, ""
	}

}

func main() {

	// 正常情况
	if result, errorMsg := Divide(100, 10); errorMsg == "" {
		fmt.Println("100/10 = ", result)
	}
	// 当被除数为零的时候会返回错误信息
	if _, errorMsg := Divide(100, 0); errorMsg != "" {
		fmt.Println("errorMsg is: ", errorMsg)    
 ********   errorMsg在此刻打印出来的原因是函数 func (de *DivideError) Error() string {    
               的这一句fmt.Sprintf(strFormat, de.dividee)是在return  上返回的，相当于一个管道传递出来
             ，而不会此时打印出来：
      目的：是为了给strFormat := `
    Cannot proceed, the divider is zero.
    dividee: %d
    divider: 0
`这个字符串中的%d 赋值
******
   
	}

}
--------------------------------


