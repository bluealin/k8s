出自：https://blog.csdn.net/zhonglinzhang/article/details/77197834
flag 干嘛的？
找不到run（）函数  execute（）替代了？
----------------------------------------------
server.Run方法是cmd/kube-scheduler中最重要的方法：
负责config的生成。
并根据config创建sheduler对象。
启动HTTP服务，提供/debug/pprof http接口方便进行性能数据收集调优，提供/metrics http接口以供prometheus收集监控数据。
kube-scheduler自选举完成后立刻开始循环执行scheduler.Run进行调度。
Scheduler 负责安排 Pod 到具体的Node，通过 API Server 提供的接口监听 Pods，获取待调度 pod，根据一系列的预选策略和优选策略给各
个 Node 节点打分排序，然后将 Pod 调度到得分最高的 Node 节点上，然后由 kubelet 负责创建 Pod。
Kubernetes 调度分为 Predicate（预选）和 Priority（优选），分为两个过程：
------------------------------------------------------------------------
预选：遍历所有 Node，按照预选筛选出符合要求的 Node，如果没有 Node 符合 Predicate 策略，那该 Pod 就会被挂起，直到有 Node 能够满足所有策略；
优选，在第一步基础上，按照优选为待选 Node 打分，获取最高分；

plugin/cmd/kube-scheduler/app/options.go 文件中 SchedulerServer 定义了运行一个调度器所需要的上下文以及参数：
结构体：type SchedulerServer struct 
一. 入口 main 函数
    路径 plugin/cmd/kube-scheduler/scheduler.go，初始化一个 SchedulerServer，定义了命令行参数，主要逻辑是执行 Run
     现在版本变为execute()函数
if err := command.Execute(); err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		os.Exit(1)
	}
 
二. Run 函数
     路径 plugin/cmd/kube-scheduler/app/server.go
    2.1 createClient 创建一个到 master 的客户端连接
    2.2 createRecorder 创建一个事件广播器，用于向集群中的 node 发送调度的信息。
    2.3 CreateScheduler 创建一个 scheduler server
    2.4 startHTTP 创建 HTTP 服务，用于性能分析，性能指标度量，/debug/pprof 接口方便性能数据收集，/metrics 接口供prometheus 收集监控数据。
    mux.HandleFunc("/debug/pprof/", pprof.Index)
    configz.InstallHandler(mux)
      mux.Handle("/metrics", prometheus.Handler())
      
      2.5 完成自选举则进入关键执行体 sched.Run 主要逻辑函数为 scheduleOne 路径 plugin/pkg/scheduler/scheduler.go， 
      启动 goroutine，循环执行 scheduleOne 方法，直到收到 shut down 的信号
      通道 协程goroutine？？？

****************************************
run := func(_ <-chan struct{}) {
       sched.Run()
       select {}
}

if !s.LeaderElection.LeaderElect {
       run(nil)
       panic("unreachable")
}
***************************************
2.6 scheduleOne 每一次选择一个 pod 进行处理，使用 scheduler 函数（2.7 讲解）进行预选（predicate）和优选 (priority)，
选择一个合适的 host，将 pod 和 host 进行绑定关联
    2.7 schedule 主要使用调用接口 SchedulerAlgorithm 中的 Scheduler 方法，启动会有个默认的函数注册（第三章节讲解)，这里有三个主要内容，
findNodesThatFit：根据所有预选算法过滤符合的 node 列表
PrioritizeNodes: 对符合的节点进行优选评分，一个排序的列表
selectHost: 对优选的 node 列表选择一个最优的节点
// Schedule tries to schedule the given pod to one of node in the node list.
// If it succeeds, it will return the name of the node.
// If it fails, it will return a Fiterror error with reasons.
func (g *genericScheduler) Schedule(pod *v1.Pod, nodeLister algorithm.NodeLister) (string, error) {  
       nodes, err := nodeLister.List()
       
       filteredNodes, failedPredicateMap, err := findNodesThatFit(pod, g.cachedNodeInfoMap, nodes, g.predicates, g.extenders, g.predicateMetaProducer, g.equivalenceCache)

       if len(filteredNodes) == 0 {
              return "", &FitError{
                     Pod:              pod,
                     FailedPredicates: failedPredicateMap,
              }
       }

       trace.Step("Prioritizing")
       metaPrioritiesInterface := g.priorityMetaProducer(pod, g.cachedNodeInfoMap)
       priorityList, err := PrioritizeNodes(pod, g.cachedNodeInfoMap, metaPrioritiesInterface, g.prioritizers, 
       filteredNodes, g.extenders)

       trace.Step("Selecting host")
       return g.selectHost(priorityList)
}
------------------------
算法
路径 plugin/pkg/scheduler/algorighmprovider/defaults.go，
启动会注册一大堆 defalutProvidor，主要是初始化 plugin/pkg/scheduler/factory/plugins.go 全局变量
factory.RegisterAlgorithmProvider(factory.DefaultProvider, defaultPredicates(), defaultPriorities())

一. 预选算法－predicate
    路径 plugin/pkg/scheduler/algorithm/predicates/predicates.go，选出符合预选策略的 node 列表
    检查资源情况
    二. 优选算法－predicate

    路径 plugin/pkg/scheduler/algorithm/priorities/priorities.go，结果为一个二维数组，含有节点与各项
    优选算法的分数（0-10 之间），如
    BalancedResourceAllocationMap: 资源使用均衡分数最高，计算公式 score = 10 - abs(cpuFraction-memoryFraction)*10

目录结构有所改变

├── cmd
│   └── kube-scheduler          // kube-scheduler command的相关代码
│       ├── app                 // kube-scheduler app的启动
│       │   ├── options         
│       │   │   └── options.go  // 封装SchedulerServer对象和AddFlags方法
│       │   └── server.go       // 定义SchedulerServer的config封装和Run方法
│       └── scheduler.go        // kube-scheduler main方法入口
└── pkg
    ├── scheduler               // scheduler后端核心代码
    │   ├── algorithm
    │   │   ├── doc.go
    │   │   ├── listers.go      // 定义NodeLister和PodLister等Interface
    │   │   ├── predicates      // 定义kubernetes自带的Predicates Policies的Function实现
    │   │   │   ├── error.go
    │   │   │   ├── metadata.go
    │   │   │   ├── predicates.go   // 自带Predicates Policies的主要实现
    │   │   │   ├── predicates_test.go
    │   │   │   ├── utils.go
    │   │   │   └── utils_test.go
    │   │   ├── priorities      // 定义kubernetes自带的Priorities Policies的Function实现
    │   │   │   ├── balanced_resource_allocation.go    // defaultProvider - BalancedResourceAllocation
    │   │   │   ├── balanced_resource_allocation_test.go
    │   │   │   ├── image_locality.go    // defaultProvider - ImageLocalityPriority
    │   │   │   ├── image_locality_test.go
    │   │   │   ├── interpod_affinity.go   // defaultProvider - InterPodAffinityPriority
    │   │   │   ├── interpod_affinity_test.go
    │   │   │   ├── least_requested.go  // defaultProvider - LeastRequestedPriority
    │   │   │   ├── least_requested_test.go 
    │   │   │   ├── metadata.go         // priorityMetadata定义
    │   │   │   ├── most_requested.go   // defaultProvider - MostRequestedPriority
    │   │   │   ├── most_requested_test.go
    │   │   │   ├── node_affinity.go    // defaultProvider - NodeAffinityPriority
    │   │   │   ├── node_affinity_test.go
    │   │   │   ├── node_label.go       // 当policy.Argument.LabelPreference != nil时，会注册该Policy
    │   │   │   ├── node_label_test.go
    │   │   │   ├── node_prefer_avoid_pods.go  // defaultProvider - NodePreferAvoidPodsPriority 
    │   │   │   ├── node_prefer_avoid_pods_test.go
    │   │   │   ├── selector_spreading.go     // defaultProvider - SelectorSpreadPriority
    │   │   │   ├── selector_spreading_test.go
    │   │   │   ├── taint_toleration.go      // defaultProvider - TaintTolerationPriority
    │   │   │   ├── taint_toleration_test.go
    │   │   │   ├── test_util.go
    │   │   │   └── util                // 工具类
    │   │   │       ├── non_zero.go
    │   │   │       ├── topologies.go
    │   │   │       └── util.go
    │   │   ├── scheduler_interface.go    // 定义SchedulerExtender和ScheduleAlgorithm Interface
    │   │   ├── scheduler_interface_test.go
    │   │   └── types.go               // 定义了Predicates和Priorities Algorithm要实现的方法类型(FitPredicate, PriorityMapFunction)
    │   ├── algorithmprovider          // algorithm-provider参数配置的项
    │   │   ├── defaults    
    │   │   │   ├── compatibility_test.go
    │   │   │   └── defaults.go         // "DefaultProvider"的实现
    │   │   ├── plugins.go            // 空，预留自定义
    │   │   └── plugins_test.go
    │   ├── api                       // 定义Scheduelr API接口和对象，用于SchedulerExtender处理来自HTTPExtender的请求。
    │   │   ├── latest
    │   │   │   └── latest.go
    │   │   ├── register.go
    │   │   ├── types.go              // 定义Policy, PredicatePolicy,PriorityPolicy等
    │   │   ├── v1
    │   │   │   ├── register.go
    │   │   │   └── types.go
    │   │   └── validation
    │   │       ├── validation.go    // 验证Policy的定义是否合法
    │   │       └── validation_test.go
    │   ├── equivalence_cache.go    // 
    │   ├── extender.go               // 定义HTTPExtender的新建以及对应的Filter和Prioritize方法来干预预选和优选
    │   ├── extender_test.go
    │   ├── factory                    // 根据配置的Policies注册和匹配到对应的预选(FitPredicateFactory)和优选(PriorityFunctionFactory2)函数
    │   │   ├── factory.go             // 核心是定义ConfigFactory来工具配置完成scheduler的封装函数，最关键的CreateFromConfig和CreateFromKeys
    │   │   ├── factory_test.go
    │   │   ├── plugins.go             // 核心是定义注册自定义预选和优选Policy的方法
    │   │   └── plugins_test.go
    │   ├── generic_scheduler.go        // 定义genericScheduler，其Schedule(...)方法作为调度执行的真正开始的地方
    │   ├── generic_scheduler_test.go
    │   ├── metrics                    // 支持注册metrics到Prometheus
    │   │   └── metrics.go
    │   ├── scheduler.go                // 定义Scheduler及Run()，核心的scheduleOne()方法也在此，scheduleOne()一个完成的调度流程，包括或许待调度Pod、调度、Bind等
    │   ├── scheduler_test.go
    │   ├── schedulercache       
    │   │   ├── cache.go               // 定义schedulerCache对Pod，Node，以及Bind的CURD，以及超时维护等工作
    │   │   ├── cache_test.go
    │   │   ├── interface.go           // schedulerCache要实现的Interface
    │   │   ├── node_info.go          // 定义NodeInfo及其相关Opertation
    │   │   └── util.go
    │   └── testing
    │       ├── fake_cache.go
    │       └── pods_to_cache.go


